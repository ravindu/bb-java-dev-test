plugins {
	id 'org.springframework.boot' version '2.2.5.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id "com.palantir.docker" version "0.22.1"
	id 'jacoco'
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
group = 'com.bb.java.developer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	mavenLocal()
}

ext {
	mapstructVersion = "1.3.0.Final"
	javaxVersion = "2.0.1.Final"
	lombokVersion = "1.18.6"
	cucumberVersion = "4.3.1"
	jupiterEngineVersion = "5.2.0"
	mockitoVersion = "2.23.0"
	springCloudContractVersion = "2.1.3.RELEASE"
	springPluginCore = "1.2.0.RELEASE"
	jacocoVersion = "0.8.3"
	swaggerVersion = "2.9.2"
	swaggerModelVersion="1.5.21"
	enversVersion = "5.4.2.Final"
	apiVersion="0.0.1-SNAPSHOT"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'io.projectreactor.addons:reactor-extra'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "javax.validation:validation-api:${javaxVersion}"
	implementation "org.projectlombok:lombok:${lombokVersion}"
	implementation("io.springfox:springfox-swagger2:${swaggerVersion}") {
		exclude group: 'io.swagger', module: 'swagger-models'
	}
	implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
	implementation "io.swagger:swagger-models:${swaggerModelVersion}"
	implementation "com.bb.java.developer:bb-java-developer-test-api:${apiVersion}"
	implementation 'org.apache.commons:commons-lang3:3.0'
	implementation 'org.flywaydb:flyway-core'
	implementation "org.hibernate:hibernate-envers:${enversVersion}"
	compile 'com.h2database:h2:1.4.199'
	compile "io.springfox:springfox-swagger2:2.9.2"
	compile "io.springfox:springfox-swagger-ui:2.9.2"


	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "io.cucumber:cucumber-java:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-jvm:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-junit:${cucumberVersion}"
	testImplementation "io.cucumber:cucumber-spring:${cucumberVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-engine:${jupiterEngineVersion}"
	testImplementation "org.junit.vintage:junit-vintage-engine:${jupiterEngineVersion}"
	testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
	testImplementation "org.projectlombok:lombok:${lombokVersion}"
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'com.h2database:h2'
	testImplementation 'org.flywaydb:flyway-core'
	testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.0'

}

test {
	useJUnitPlatform()
	testLogging.showStandardStreams = true
	testLogging {
		exceptionFormat = 'full'
	}
	afterSuite { desc, result ->
		if (!desc.parent) {
			println "Results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
		}
	}
}

jacoco {
	toolVersion = "${jacocoVersion}"
	reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}
